@startuml Diagrama de Clases
' left to right direction
class Juego << (S,#FF7700) Singleton >>{
    +estado: JEstado
    +tiempo: int
    +puntuacion: int

    -loop(): void
    -updateTime(int change): void
    -render(): void
    -handleEvents(): void
    -handleInputs(): void
    +getInstance(): Juego*
}

interface Estado {
    -Init(): void
    -HandleEvents(RenderWindow* ventana): void
    -Update(): void
    -loop(RenderWindow* ventana): void
    -Draw(RenderWindow* ventana)
}

class Jugador {
    +jugador_sprite: SuperSprite
    +pState: PhysicsState*
    +vidas: int
    +estado: Clock
    +limite_estado: double


    -getPhysicsState(): PhysicsState* 
    -updateJugador(bool eRight,bool eLeft,bool eUp,bool eDown, sf::Time et): void 
    -calcInter(RenderWindow* w, double i): void 
    -drawJugador(RenderWindow* w, double i): void 
    -updateVida(int change): void 
    -checkEstado(): int
    -setEstado(int e): void 
    -restartEstado(): void 
    -getSprite(): void 
}

class EstadoFisico {
    +posicionActual: Vector2f
    +posicionAnterior: Vector2f
    
    -getPastState(): vector<double> 
    -getActualState(): vector<double> 
    -getVel(): vector<double> 
    -setVel(double x, double y): void
    -setPastState(double x, double y): void 
    -setActualState(double x, double y): void 
    -setColliders(vector <Rect<float> > colinit): void 
    -drawColliders(RenderWindow* w, double i): void
    -getColliders(): vector<Rect<float>>
    -Move(double ax,double ay,bool acelerado): void
    -MoveTo(double ax,double ay): void 
    -updatePhysicsState(sf::Time et): void   
}

class Mapa {
    +texture: Texture
    +sprite: Sprite
    +tileSet: map<vector<vector<int>>>

    -getSprite(): Sprite
    -setSprite(int gid): int
}

class Item {
    +tipo: int
    +tiempoGenereacion: int
    +tiempoVida: int
    +reloj: Clock
    +posicion: Vector2f
    +sprite: Sprite

    -getTipo(): int
    -getTiempoGenereacion(): int
    -getTiempoVida(): int
    -getReloj(): int
    -getPosicion(): Vector2f
    -getSprite(): Sprite
}

class Mundo {
    +puntosEntrega: Vector2f []
    +puntoEntregaActual: int
}

class Enemy {
    +sprite: Sprite
    +textura: Texture
    +modo: int

    -getSprite(): Sprite
    -comprobarVision(): bool
}

class Trafico {
    -textura: Texture
    -sprite: Sprite
    -camino: Vector2f[]

    
}


class AIAgent {

    -comprobarColisiones(): void
}

class EJugando << (S,#FF7700) Singleton >>{

    -update(): void
    -render(): void
    +getInstance(): &Estado
}

class EMenu << (S,#FF7700) Singleton >>{

    -update(): void
    -render(): void
    +getInstance(): &Estado
}

class EFin << (S,#FF7700) Singleton >>{

    -update(): void
    -render(): void
    +getInstance(): &Estado
}

Juego -- Estado

EJugando --|> Estado
EMenu --|> Estado
EFin --|> Estado

EJugando -- Mundo

Mundo *-- "1" Jugador
Mundo *-- "*" Enemy
Mundo *-- Item
Mundo *-- Trafico
Mundo *-- Mapa

AIAgent *-- Mundo

Enemy *-- EstadoFisico
Jugador *-- EstadoFisico


@enduml